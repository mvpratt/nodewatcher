package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"math/rand"

	"github.com/mvpratt/nodewatcher/internal/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		Text:   input.Text,
		ID:     fmt.Sprintf("T%d", rand.Int()),
		User:   &model.User{ID: input.UserID, Name: "user " + input.UserID},
		UserID: input.UserID,
	}
	r.todos = append(r.todos, todo)
	return todo, nil
}

// CreateNode is the resolver for the createNode field.
func (r *mutationResolver) CreateNode(ctx context.Context, input model.NewNode) (*model.Node, error) {
	node := &model.Node{
		ID:       input.ID,
		URL:      input.URL,
		Alias:    input.Alias,
		Pubkey:   input.Pubkey,
		Macaroon: input.Macaroon,
	}
	r.nodes = append(r.nodes, node)
	return node, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.todos, nil
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context) ([]*model.Node, error) {
	node, err := r.DB.FindNodeByPubkey("026272077362d09a1296bd90c1714e21a5f978558625901afdf03bf9421e8a7d0d")
	if err != nil {
		return nil, err
	}
	var nodes []*model.Node
	var graphNode = &model.Node{
		ID:       int(node.ID),
		URL:      node.URL,
		Alias:    node.Alias,
		Pubkey:   node.Pubkey,
		Macaroon: node.Macaroon,
	}
	nodes = append(nodes, graphNode)
	return nodes, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return &model.User{ID: obj.UserID, Name: "user " + obj.UserID}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
