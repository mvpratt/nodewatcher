AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a service on AWS Fargate, hosted in a private subnet, but accessible via a private network load balancer
# based on the original cloudformation template created by Erin Mcgill and Nathan Peck.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Container configuration"
        Parameters:
          - ServicePrefix
          - RepositoryURI
          - SourceAccessCIDR
          - ContainerPort
          - ContainerCpu
          - ContainerMemory
          - DesiredCount
      - Label:
          default: "AZ configuration"
        Parameters:
          - AvailabilityZones

Parameters:
    AvailabilityZones:
      Description: 'List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved.'
      Type: List<AWS::EC2::AvailabilityZone::Name>
      Default: us-east-1a, us-east-1b
    PrivateSubnet1CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
      Default: 10.0.0.0/19
      Description: CIDR block for the private subnet located in Availability Zone 1
      Type: String
    PrivateSubnet2CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
      Default: 10.0.32.0/19
      Description: CIDR block for the private subnet located in Availability Zone 2
      Type: String
    PublicSubnet1CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
      Default: 10.0.128.0/20
      Description: CIDR block for the public DMZ subnet located in Availability Zone 1
      Type: String
    PublicSubnet2CIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
      Default: 10.0.144.0/20
      Description: CIDR block for the public DMZ subnet located in Availability Zone 2
      Type: String
    VPCCIDR:
      AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
      ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
      Default: 10.0.0.0/16
      Description: CIDR block for the VPC
      Type: String
    ServicePrefix:
      Type: String
      Default: nodewatcher-service
      Description: A name for the Fargate service
    RepositoryURI:
      Type: String
      Default: nodewatcher
      Description: The repository URI of the docker image that contains the application process that will handle the traffic for this service, ex. nginx
    ContainerPort:
      Type: Number
      Default: 80
      Description: What port number the application inside the docker container is binding to
    ContainerCpu:
      Type: Number
      Default: 512
      Description: How much CPU to give the container. 1024 is 1 CPU
    ContainerMemory:
      Type: Number
      Default: 1024
      Description: How much memory in megabytes to give the container
    DesiredCount:
      Type: Number
      Default: 2
      Description: How many copies of the service task to run
    SourceAccessCIDR:
      Type: String
      Description: The CIDR IP range that is permitted to access the running tasks. We recommend that you set this value to a trusted IP range.
      Default: 0.0.0.0/0


Mappings:
  AWSAMIRegionMap:
    AMI:
      AWSNATHVM: amzn-ami-vpc-nat-hvm-2017.03.0.20170401-x86_64-ebs
    us-gov-west-1:
      AWSNATHVM: ami-3f0a8f5e

Conditions:
    NVirginiaRegionCondition:
      Fn::Equals:
      - !Ref AWS::Region
      - us-east-1

Resources:

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
      Cpu: !Ref ContainerCpu
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          Image: !Ref RepositoryURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          HealthCheck:
            Command:
              - true
            Interval: 5
            Retries: 10
            StartPeriod: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['/', [ecs, !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]]]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ECSCluster:
    Type: AWS::ECS::Cluster
  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FargateContainerSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

# This is an IAM role which authorizes ECS to manage resources on your
# account on your behalf, such as updating your load balancer with the
# details of where your containers are, so that traffic can reach your
# containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'

              # Rules which allow ECS to update load balancers on your behalf
              # with the information sabout how to send traffic to your containers
              - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
              - 'elasticloadbalancing:DeregisterTargets'
              - 'elasticloadbalancing:Describe*'
              - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
              - 'elasticloadbalancing:RegisterTargets'
            Resource: '*'

# This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS Tasks to download images from ECR
                - 'ecr:GetAuthorizationToken'
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'

                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'

# Fargate Security Groups
  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId: !Ref VPC
  EcsSecurityGroupIngressFromClient:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from external clients
      GroupId: !Ref FargateContainerSecurityGroup
      CidrIp: !Ref SourceAccessCIDR
      FromPort: !Ref ContainerPort
      ToPort: !Ref ContainerPort
      IpProtocol: tcp
  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref FargateContainerSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref FargateContainerSecurityGroup
  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
        LogGroupName: !Join ['/', [ecs, !Join ['-', [!Ref ServicePrefix, !Ref 'AWS::StackName']]]]
        RetentionInDays: 14

  NetworkLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: !Ref ContainerPort
            ToPort: !Ref ContainerPort
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10
      TargetType: ip
      # Only use the stack name here because the full name can only be 32 characters, service prefix + stack name is often too long
      Name: !Ref AWS::StackName
      Port: !Ref ContainerPort
      Protocol: TCP
      VpcId: !Ref VPC
  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: !Ref ContainerPort
      Protocol: TCP
  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        -
          Key: StackName
          Value: !Ref AWS::StackName
      Type: network
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        Fn::If:
        - NVirginiaRegionCondition
        - ec2.internal
        - Fn::Join:
          - ''
          - - !Ref AWS::Region
            - ".compute.internal"
      DomainNameServers:
      - AmazonProvidedDNS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
        - '0'
        - !Ref AvailabilityZones
      Tags:
      - Key: Name
        Value: Private subnet 1
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
        - '1'
        - !Ref AvailabilityZones
      Tags:
      - Key: Name
        Value: Private subnet 2
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      AvailabilityZone:
        Fn::Select:
        - '0'
        - !Ref AvailabilityZones
      Tags:
      - Key: Name
        Value: Public subnet 1
      MapPublicIpOnLaunch: true
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2CIDR
      AvailabilityZone:
        Fn::Select:
        - '1'
        - !Ref AvailabilityZones
      Tags:
      - Key: Name
        Value: Public subnet 2
      MapPublicIpOnLaunch: true
  PrivateSubnet1RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private subnet 1
      - Key: Network
        Value: Private
  PrivateSubnet1Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateSubnet1RouteTable
  PrivateSubnet2Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateSubnet2RouteTable
  PrivateSubnet2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private subnet 2
      - Key: Network
        Value: Private
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public
  PublicSubnet1Route:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable
  NATGateway1:
      DependsOn: VPCGatewayAttachment
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
          - NAT1EIP
          - AllocationId
        SubnetId: !Ref PublicSubnet1
  NATGateway2:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
        - NAT2EIP
        - AllocationId
      SubnetId: !Ref PublicSubnet2
  NAT1EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NAT2EIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  VPCFlowLog:
    DependsOn: NAT2EIP
    Type: AWS::EC2::FlowLog
    Properties:
        DeliverLogsPermissionArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/flowlogsRole"
        LogGroupName: !Sub "${AWS::StackName}-vpc-flowlogs"
        ResourceId: !Ref VPC
        ResourceType: "VPC"
        TrafficType: "ALL"

Outputs:

  ClusterName:
    Description: The name of the ECS Fargate cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  InternalUrl:
    Description: The URL of the internal load balancer
    Value: !Join ['', ['http://', !GetAtt 'NetworkLoadBalancer.DNSName']]
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'InternalUrl' ] ]
  NLBEndpoint:
    Description: The ARN of the Network Load Balancer
    Value: !Ref NetworkLoadBalancer
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NLBEndpoint"
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  PrivateSubnetOne:
    Description: Private subnet one
    Value: !Ref 'PrivateSubnet1'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetOne' ] ]
  PrivateSubnetTwo:
    Description: Private subnet two
    Value: !Ref 'PrivateSubnet2'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PrivateSubnetTwo' ] ]